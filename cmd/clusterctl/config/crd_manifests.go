package config

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
)

func bindata_read(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	return buf.Bytes(), nil
}

var _manifest_clusterctl_api_yaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x55\x4d\x8f\xdb\x36\x10\xbd\xeb\x57\x0c\xd2\x43\x2e\xb5\x8c\x45\x2e\x85\x6e\x81\xdb\xc3\xf6\x23\x35\xb2\x8b\xcd\xa1\xe8\x61\x4c\x8e\x6d\x36\x14\xc9\x72\x86\x4e\xb6\x45\xff\x7b\x41\x52\x92\x25\x01\xbb\xbe\x44\x27\xf1\x71\xbe\xf8\xde\x70\x88\xc1\x3c\x51\x64\xe3\x5d\x07\x18\x0c\x7d\x15\x72\x79\xc5\xed\xe7\x1f\xb8\x35\x7e\x7b\xb9\x3b\x90\xe0\x5d\xf3\xd9\x38\xdd\xc1\x2e\xb1\xf8\xfe\x23\xb1\x4f\x51\xd1\x8f\x74\x34\xce\x88\xf1\xae\xe9\x49\x50\xa3\x60\xd7\x00\xa8\x48\x98\xc1\x47\xd3\x13\x0b\xf6\xa1\x03\x97\xac\x6d\x00\x1c\xf6\xd4\x41\x88\xfe\x62\x34\x45\x6e\x95\x4d\x2c\x14\x95\xd8\xf1\xb7\xfd\xba\xa9\x89\x1b\x0e\xa4\x72\x34\xd4\xba\xa4\x40\xbb\x8f\xc6\x09\xc5\x9d\xb7\xa9\x77\x9c\xf7\x36\xf0\xf3\xc3\xef\x1f\xf6\x28\xe7\x0e\x5a\x79\x0e\xd4\x00\x8c\x59\x1e\xc7\x65\xc6\x3b\x60\x89\xc6\x9d\xd6\x3e\x97\x7a\xf6\x99\xdb\xd3\x0c\x79\xcd\xf3\x0b\x8a\x3a\x93\xfe\x80\x3d\x71\x40\x35\xcf\xfc\x29\x6f\xc1\x72\x67\x15\xea\x14\x7d\x0a\x1d\xbc\x76\xfe\x1a\xad\x1c\x13\x40\xa1\xd0\xc9\x47\x33\xae\x37\xa3\xeb\x06\x83\x29\x48\xd5\x67\x3f\x50\x5b\x20\x6b\x58\x7e\x59\xc0\xbf\x1a\x96\xb2\x15\x6c\x8a\x68\x67\x52\x14\x94\x8d\x3b\x25\x8b\xf1\x8a\x37\x00\xac\x7c\x2e\x7d\x3a\x8e\xce\x58\x3a\xc4\xa1\x07\xb8\x83\x7f\xff\x6b\x00\x2e\x68\x8d\x2e\xb2\xd7\x0a\x7d\x20\xf7\x7e\x7f\xff\xf4\xee\x41\x9d\xa9\xc7\x0a\x02\x68\x62\x15\x4d\x28\x76\x53\x59\x60\x18\xe4\x4c\x50\x4d\xe1\xe8\x63\x59\x4e\xc5\xc1\xfb\xfd\xfd\xe0\x1f\xa2\x0f\x14\x65\x22\x22\x7f\xb3\x1e\x9e\xb0\x55\xa6\xb7\xb9\x94\x6a\x03\x3a\x77\x2d\xd5\x8c\x83\xfe\xa4\x81\x6b\x6e\x7f\x04\x39\x1b\x86\x48\x21\x12\x93\x93\x72\xa4\x59\x58\xc8\x26\xe8\xc0\x1f\xfe\x22\x25\x2d\x3c\x50\xcc\x41\x80\xcf\x3e\x59\x0d\xca\xbb\x0b\x45\x81\x48\xca\x9f\x9c\xf9\x67\x8a\xcc\x20\xbe\xa4\xb4\x28\x34\xa8\x30\x7e\xa5\xad\x1d\xda\x4c\x62\xa2\xef\x01\x9d\x86\x1e\x9f\x21\x52\xce\x01\xc9\xcd\xa2\x15\x13\x6e\xe1\x37\x1f\x09\x8c\x3b\xfa\x0e\xce\x22\x81\xbb\xed\xf6\x64\x64\xbc\xb5\xca\xf7\x7d\x72\x46\x9e\xb7\xca\x3b\x89\xe6\x90\xc4\x47\xde\x6a\xba\x90\xdd\x62\x30\x9b\x52\xa7\x93\x72\xd3\x7b\xfd\xdd\xa4\xe6\xdb\x59\x61\xab\x9e\xad\x5f\xe9\xb3\x17\x69\xce\xed\x96\xd5\xc4\xc1\xad\x96\x7b\x65\x33\x43\x99\x84\x8f\x3f\x3d\x3c\xc2\x98\xb4\x30\xbe\xa4\xb8\x90\x7b\x75\xe3\x2b\xcf\x99\x17\xe3\x8e\x14\xab\x4e\xc7\xe8\xfb\x12\x91\x9c\x0e\xde\x38\x29\x0b\x65\x0d\xb9\x25\xc7\x9c\x0e\xbd\x91\x2c\xec\xdf\x89\x58\xb2\x1c\x2d\xec\xd0\x39\x2f\x70\x20\x48\x41\xa3\x90\x6e\xe1\xde\xc1\x0e\x7b\xb2\x3b\x64\xfa\xd6\x2c\x67\x42\x79\x93\x19\xbc\xcd\xf3\x7c\xa0\x2e\x0d\x2b\x39\xcd\x02\x7c\x49\x90\x3c\x04\xc1\x38\x6d\xf2\x00\xa9\x2d\x9f\xed\x6b\x9b\x5f\x6f\x58\xa6\x97\xa6\xeb\x58\x9c\x8e\x3e\x2e\xf8\xc3\x32\x4e\xb2\x23\xa7\x10\x7c\x94\xa9\x17\x6f\x9d\xe4\x72\xe3\x6e\x8e\xf7\x72\x59\xa6\xf2\x7d\xf0\x8e\x9c\x8c\xfe\xed\xad\x3c\xeb\x89\xfc\x62\xc2\x4f\x2b\xc3\x55\x66\x37\xe1\x5f\xce\x14\x69\x41\xd4\x82\x92\x22\xba\xb7\xb6\x0e\x30\xc3\xb5\x02\xe3\x4e\x2d\x98\x23\x50\x1f\xe4\x79\xe1\xbc\x72\x18\xad\x17\x31\xf3\xec\xab\x02\x33\x18\x07\x68\xed\xb5\x1e\xbe\x41\xc1\xaa\x3d\x46\xde\xe1\x72\x87\x36\x9c\xf1\xdd\x15\x1b\x1e\xcf\xfa\x5c\xcd\xb6\x01\x38\x5f\x33\xdd\x81\xc4\x54\x1f\x2e\x16\x1f\xf1\x44\x03\xc2\x82\x92\x8a\x37\x2a\x45\x41\x06\x16\xbb\xd9\x13\xf4\xe6\xcd\xe2\x85\x29\x4b\xe5\x5d\x7d\xc4\xb9\x83\x3f\xfe\x6c\x6a\x54\xd2\x4f\x63\x35\x19\xfc\x3f\x00\x00\xff\xff\x6e\x55\x39\xc0\x8a\x08\x00\x00")

func manifest_clusterctl_api_yaml() ([]byte, error) {
	return bindata_read(
		_manifest_clusterctl_api_yaml,
		"manifest/clusterctl-api.yaml",
	)
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		return f()
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() ([]byte, error){
	"manifest/clusterctl-api.yaml": manifest_clusterctl_api_yaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for name := range node.Children {
		rv = append(rv, name)
	}
	return rv, nil
}

type _bintree_t struct {
	Func     func() ([]byte, error)
	Children map[string]*_bintree_t
}

var _bintree = &_bintree_t{nil, map[string]*_bintree_t{
	"manifest": {nil, map[string]*_bintree_t{
		"clusterctl-api.yaml": {manifest_clusterctl_api_yaml, map[string]*_bintree_t{}},
	}},
}}
